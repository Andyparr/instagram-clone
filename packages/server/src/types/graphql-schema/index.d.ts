import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/* tslint:disable */

declare namespace GQL {
  /*******************************
   *                             *
   *          TYPE DEFS          *
   *                             *
   *******************************/
  export interface IQuery {
    getAllPosts: Array<IPost>
    uploads?: Array<IFile | null>
    me?: IUser
    getAllUsers: Array<IUser>
  }

  export interface IPost {
    id: string
    imageUrl: string
    createdAt: IDate
    uploadedBy: IUser
  }

  export type IDate = any

  export interface IUser {
    id: string
    firstName: string
    lastName: string
    email: string
    password: string
    registeredAt: IDate
    confirmed: boolean
  }

  export interface IFile {
    filename: string
    mimetype: string
    encoding: string
  }

  export interface IMutation {
    addPost: IResponse
    deletePost: IResponse
    updatePost: IResponse
    singleUpload: IFile
    deleteUser: IResponse
    sendForgotPasswordEmail?: boolean
    forgotPasswordChange?: Array<IError>
    login: Array<IResponse>
    logout: boolean
    register: Array<IResponse>
  }

  export interface IAddPostInput {
    image?: IUpload
  }

  /**
   * The `Upload` scalar type represents a file upload promise that resolves an object containing `stream`, `filename`, `mimetype` and `encoding`.
   */
  export type IUpload = any

  export interface IResponse {
    ok: string
    path?: string
    message: string
  }

  export interface IUpdatePostInput {
    id: string
    imageUrl?: string
  }

  export interface IError {
    path: string
    message: string
  }

  export interface ILoginInput {
    emailOrUsername: string
    password: string
  }

  export interface IRegisterInput {
    firstName: string
    lastName: string
    email: string
    password: string
    username: string
  }

  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface IResolver {
    Query?: IQueryTypeResolver
    Post?: IPostTypeResolver
    Date?: GraphQLScalarType
    User?: IUserTypeResolver
    File?: IFileTypeResolver
    Mutation?: IMutationTypeResolver
    Upload?: GraphQLScalarType
    Response?: IResponseTypeResolver
    Error?: IErrorTypeResolver
  }
  export interface IQueryTypeResolver<TParent = any> {
    getAllPosts?: QueryToGetAllPostsResolver<TParent>
    uploads?: QueryToUploadsResolver<TParent>
    me?: QueryToMeResolver<TParent>
    getAllUsers?: QueryToGetAllUsersResolver<TParent>
  }

  export interface QueryToGetAllPostsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface QueryToUploadsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface QueryToMeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface QueryToGetAllUsersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface IPostTypeResolver<TParent = any> {
    id?: PostToIdResolver<TParent>
    imageUrl?: PostToImageUrlResolver<TParent>
    createdAt?: PostToCreatedAtResolver<TParent>
    uploadedBy?: PostToUploadedByResolver<TParent>
  }

  export interface PostToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface PostToImageUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface PostToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface PostToUploadedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface IUserTypeResolver<TParent = any> {
    id?: UserToIdResolver<TParent>
    firstName?: UserToFirstNameResolver<TParent>
    lastName?: UserToLastNameResolver<TParent>
    email?: UserToEmailResolver<TParent>
    password?: UserToPasswordResolver<TParent>
    registeredAt?: UserToRegisteredAtResolver<TParent>
    confirmed?: UserToConfirmedResolver<TParent>
  }

  export interface UserToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToPasswordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToRegisteredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface UserToConfirmedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface IFileTypeResolver<TParent = any> {
    filename?: FileToFilenameResolver<TParent>
    mimetype?: FileToMimetypeResolver<TParent>
    encoding?: FileToEncodingResolver<TParent>
  }

  export interface FileToFilenameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface FileToMimetypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface FileToEncodingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface IMutationTypeResolver<TParent = any> {
    addPost?: MutationToAddPostResolver<TParent>
    deletePost?: MutationToDeletePostResolver<TParent>
    updatePost?: MutationToUpdatePostResolver<TParent>
    singleUpload?: MutationToSingleUploadResolver<TParent>
    deleteUser?: MutationToDeleteUserResolver<TParent>
    sendForgotPasswordEmail?: MutationToSendForgotPasswordEmailResolver<TParent>
    forgotPasswordChange?: MutationToForgotPasswordChangeResolver<TParent>
    login?: MutationToLoginResolver<TParent>
    logout?: MutationToLogoutResolver<TParent>
    register?: MutationToRegisterResolver<TParent>
  }

  export interface MutationToAddPostArgs {
    input: IAddPostInput
  }
  export interface MutationToAddPostResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToAddPostArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToDeletePostArgs {
    id: string
  }
  export interface MutationToDeletePostResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToDeletePostArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToUpdatePostArgs {
    input: IUpdatePostInput
  }
  export interface MutationToUpdatePostResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToUpdatePostArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToSingleUploadArgs {
    file: IUpload
  }
  export interface MutationToSingleUploadResolver<
    TParent = any,
    TResult = any
  > {
    (
      parent: TParent,
      args: MutationToSingleUploadArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToDeleteUserArgs {
    id: string
  }
  export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToDeleteUserArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToSendForgotPasswordEmailArgs {
    email: string
  }
  export interface MutationToSendForgotPasswordEmailResolver<
    TParent = any,
    TResult = any
  > {
    (
      parent: TParent,
      args: MutationToSendForgotPasswordEmailArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToForgotPasswordChangeArgs {
    newPassword: string
    key: string
  }
  export interface MutationToForgotPasswordChangeResolver<
    TParent = any,
    TResult = any
  > {
    (
      parent: TParent,
      args: MutationToForgotPasswordChangeArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToLoginArgs {
    input: ILoginInput
  }
  export interface MutationToLoginResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToLoginArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface MutationToLogoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface MutationToRegisterArgs {
    input: IRegisterInput
  }
  export interface MutationToRegisterResolver<TParent = any, TResult = any> {
    (
      parent: TParent,
      args: MutationToRegisterArgs,
      context: any,
      info: GraphQLResolveInfo
    ): TResult
  }

  export interface IResponseTypeResolver<TParent = any> {
    ok?: ResponseToOkResolver<TParent>
    path?: ResponseToPathResolver<TParent>
    message?: ResponseToMessageResolver<TParent>
  }

  export interface ResponseToOkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface ResponseToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface ResponseToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface IErrorTypeResolver<TParent = any> {
    path?: ErrorToPathResolver<TParent>
    message?: ErrorToMessageResolver<TParent>
  }

  export interface ErrorToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }

  export interface ErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
  }
}
